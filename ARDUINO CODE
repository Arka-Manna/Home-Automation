/*<!--***********************************************************************************************************************
******                                    Home Automation System with Theme Switching                                   *****
*****                                     Author: ARKA MANNA                                                            *****
*****                                                                                                                   *****
*****                                     Licensed under the Apache License, Version 2.0 (the "License") ;              *****
*****                                     you may not use this file except in compliance with the License.              *****
*****                                     You may obtain a copy of the License at                                       *****
*****                                                                                                                   *****
*****                                     http://www.apache.org/licenses/LICENSE-2.0                                    *****
*****                                                                                                                   *****
*****                                     Unless required by applicable law or agreed to in writing, software           *****
*****                                     distributed under the License is distributed on an "AS IS" BASIS,             *****
*****                                     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.      *****
*****                                     See the License for the specific language governing permissions and           *****
*****                                     limitations under the License.                                                *****
*****************************************************************************************************************************

*/
#ifdef ESP8266
#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>
#elif defined(ESP32)
#include <WiFi.h>
#include <ESPmDNS.h>
#else
#error "Board not found"
#endif

// Replace with your network credentials
const char* ssid     = "YOUR SSID";  //WIFI Name
const char* password = "YOUR PASSWORD";  //WIFI Password

// Set web server port number to 80
WiFiServer server(80);

// Variable to store the HTTP request
String header;

// Auxiliar variables to store the current output state
String Device1State = "off";
String Device2State = "off";
String Device3State = "off";
String Device4State = "off";

// Assign output variables to Relay pins
const int Device1 = 13;
const int Device2 = 12;
const int Device3 = 14;
const int Device4 = 27;

// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0;
// Define timeout time in milliseconds (example: 2000ms = 2s)
const long timeoutTime = 2000;

void setup() {
  Serial.begin(115200);

  // Initialize the output variables as outputs
  pinMode(Device1, OUTPUT);
  pinMode(Device2, OUTPUT);
  pinMode(Device3, OUTPUT);
  pinMode(Device4, OUTPUT);
  // Set outputs to LOW
  digitalWrite(Device1, LOW);
  digitalWrite(Device2, LOW);
  digitalWrite(Device3, LOW);
  digitalWrite(Device4, LOW);

  // Connect to Wi-Fi network with SSID and password
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting...");
  }
  // Print local IP address and start web server
  Serial.println(WiFi.localIP());
  server.begin();
}

void loop() {
  WiFiClient client = server.available();   // Listen for incoming clients

  if (client) {                             // If a new client connects,
    currentTime = millis();
    previousTime = currentTime;
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected() && currentTime - previousTime <= timeoutTime) {  // loop while the client's connected
      currentTime = millis();
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();

            // Respond to HTTP GET requests for device control
            if (header.indexOf("GET /1/on") >= 0) {
              Serial.println("Device 1 ON");
              Device1State = "on";
              digitalWrite(Device1, HIGH);
            } else if (header.indexOf("GET /1/off") >= 0) {
              Serial.println("Device 1 OFF");
              Device1State = "off";
              digitalWrite(Device1, LOW);
            } else if (header.indexOf("GET /2/on") >= 0) {
              Serial.println("Device 2 ON");
              Device2State = "on";
              digitalWrite(Device2, HIGH);
            } else if (header.indexOf("GET /2/off") >= 0) {
              Serial.println("Device 2 OFF");
              Device2State = "off";
              digitalWrite(Device2, LOW);
            } else if (header.indexOf("GET /3/on") >= 0) {
              Serial.println("Device 3 ON");
              Device3State = "on";
              digitalWrite(Device3, HIGH);
            } else if (header.indexOf("GET /3/off") >= 0) {
              Serial.println("Device 3 OFF");
              Device3State = "off";
              digitalWrite(Device3, LOW);
            } else if (header.indexOf("GET /4/on") >= 0) {
              Serial.println("Device 4 ON");
              Device4State = "on";
              digitalWrite(Device4, HIGH);
            } else if (header.indexOf("GET /4/off") >= 0) {
              Serial.println("Device 4 OFF");
              Device4State = "off";
              digitalWrite(Device4, LOW);
            }

            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            client.println("<style>html { font-family: Roboto, sans-serif; display: flex; justify-content: center; align-items: center; min-height: 100vh; background-color: #121212; color: #ffffff; overflow: hidden; margin: 0; padding: 0; }");
            client.println(".light-mode body { color: #000000; }");
            client.println(".container { text-align: center; position: relative; z-index: 1; padding: 20px; width: 100%; max-width: 400px; box-sizing: border-box; }");
            client.println(".header { font-size: 36px; margin-bottom: 20px; color: #00ff00; text-transform: uppercase; letter-spacing: 2px; position: relative; z-index: 2; transition: color 0.3s; }");
            client.println(".light-mode .header { color: #000000; }");
            client.println(".button { background-color: #ffff00; color: #000000; border: none; padding: 15px 30px; font-size: 18px; margin: 10px; cursor: pointer; border-radius: 5px; transition: background-color 0.3s, transform 0.3s, box-shadow 0.3s; box-shadow: 0 0 20px #ffff00; z-index: 2; }");
            client.println(".button:hover { background-color: #ffea00; transform: scale(1.05); box-shadow: 0 0 30px #ffea00; }");
            client.println(".device { margin-bottom: 20px; }");
            client.println(".device-title { font-size: 24px; margin-bottom: 10px; }");
            client.println(".state { font-size: 20px; color: #00ff00; margin-bottom: 10px; }");
            client.println(".background { position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: -1; overflow: hidden; background-color: #121212; transition: background-color 0.5s ease; }");
            client.println(".light-mode .background { background-color: #add8e6; }");
            client.println(".theme-switch { position: fixed; top: 20px; right: 20px; display: inline-block; width: 60px; height: 34px; background-color: #ccc; border-radius: 34px; padding: 2px; transition: background-color 0.3s; cursor: pointer; z-index: 2; }");
            client.println(".theme-switch .theme-switch-inner { position: relative; display: block; width: 30px; height: 30px; background-color: #fff; border-radius: 50%; transition: transform 0.3s, background-color 0.3s; transform: translateX(0); }");
            client.println(".light-mode .theme-switch { background-color: #00ff00; }");
            client.println(".light-mode .theme-switch .theme-switch-inner { transform: translateX(30px); background-color: #ffff00; }");
            client.println(".instagram-button { position: fixed; bottom: 20px; right: 20px; padding: 15px 30px; font-size: 18px; background-color: #405de6; color: #ffffff; border: none; border-radius: 5px; cursor: pointer; z-index: 2; box-shadow: 0 0 20px #405de6; transition: background-color 0.3s, transform 0.3s, box-shadow 0.3s; }");
            client.println(".instagram-button:hover { background-color: #5851db; transform: scale(1.05); box-shadow: 0 0 30px #5851db; }");
            client.println("</style></head>");
            client.println("<body><div class=\"background\"></div><div class=\"container\">");
            client.println("<div class=\"header\">ARKENSTINE LAB HQ</div><div class=\"device\">");
            client.println("<div class=\"device-title\">Electrical Device 1</div>");
            if (Device1State == "off") {
              client.println("<a href=\"/1/on\"><button class=\"button\">ON</button></a>");
            } else {
              client.println("<a href=\"/1/off\"><button class=\"button\">OFF</button></a>");
            }
            client.println("</div><div class=\"device\"><div class=\"device-title\">Electrical Device 2</div>");
            if (Device2State == "off") {
              client.println("<a href=\"/2/on\"><button class=\"button\">ON</button></a>");
            } else {
              client.println("<a href=\"/2/off\"><button class=\"button\">OFF</button></a>");
            }
            client.println("</div><div class=\"device\"><div class=\"device-title\">Electrical Device 3</div>");
            if (Device3State == "off") {
              client.println("<a href=\"/3/on\"><button class=\"button\">ON</button></a>");
            } else {
              client.println("<a href=\"/3/off\"><button class=\"button\">OFF</button></a>");
            }
            client.println("</div><div class=\"device\"><div class=\"device-title\">Electrical Device 4</div>");
            if (Device4State == "off") {
              client.println("<a href=\"/4/on\"><button class=\"button\">ON</button></a>");
            } else {
              client.println("<a href=\"/4/off\"><button class=\"button\">OFF</button></a>");
            }
            client.println("</div>");
            client.println("<div class=\"theme-switch\" onclick=\"toggleTheme()\">");
            client.println("<div class=\"theme-switch-inner\"></div>");
            client.println("</div></div><script>");
            client.println("function toggleTheme() { document.body.classList.toggle('light-mode'); var theme = document.body.classList.contains('light-mode') ? 'light' : 'dark'; fetch('/theme?theme=' + theme); }");
            client.println("</script></body></html>");
            break;
          } else {                            // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {              // if you got anything else but a carriage return character,
          currentLine += c;                  // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}
